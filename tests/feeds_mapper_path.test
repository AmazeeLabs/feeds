<?php

/**
 * @file
 * Test case for path alias mapper path.inc.
 */

/**
 * Class for testing Feeds <em>path</em> mapper.
 */
class FeedsMapperPathTestCase extends FeedsMapperTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Mapper: Path',
      'description' => 'Test Feeds Mapper support for path aliases.',
      'group' => 'Feeds',
    );
  }

  public function setUp() {
    parent::setUp(array('path'));
  }

  /**
   * Basic test loading a single entry CSV file.
   */
  public function testNodeAlias() {

    // Create importer configuration.
    $this->createImporterConfiguration($this->randomName(), 'path_test');
    $this->setPlugin('path_test', 'FeedsFileFetcher');
    $this->setPlugin('path_test', 'FeedsCSVParser');
    $this->addMappings('path_test', array(
      array(
        'source' => 'Title',
        'target' => 'title',
      ),
      array(
        'source' => 'path',
        'target' => 'path_alias',
      ),
      array(
        'source' => 'GUID',
        'target' => 'guid',
        'unique' => TRUE,
      ),
    ));

    // Turn on update existing.
    $this->setSettings('path_test', 'FeedsNodeProcessor', array('update_existing' => 2));

    // Import RSS file.
    $this->importFile('path_test', $this->absolutePath() . '/tests/feeds/path_alias.csv');
    $this->assertText('Created 9 nodes');

    $aliases = array();

    for ($i = 1; $i <= 9; $i++) {
      $aliases[] = "path$i";
    }

    $this->assertAliasCount($aliases);

    // Adding a mapping will force update.
    $this->addMappings('path_test', array(
      array(
        'source' => 'fake',
        'target' => 'body',
      ),
    ));
    // Import RSS file.
    $this->importFile('path_test', $this->absolutePath() . '/tests/feeds/path_alias.csv');
    $this->assertText('Updated 9 nodes');

    // Check that duplicate aliases are not created.
    $this->assertAliasCount($aliases);
  }

  /**
   * Test support for term aliases.
   */
  public function testTermAlias() {

    // Create importer configuration.
    $this->createImporterConfiguration($this->randomName(), 'path_test');
    $this->setPlugin('path_test', 'FeedsFileFetcher');
    $this->setPlugin('path_test', 'FeedsCSVParser');
    $this->setPlugin('path_test', 'FeedsTermProcessor');
    $this->addMappings('path_test', array(
      array(
        'source' => 'Title',
        'target' => 'name',
      ),
      array(
        'source' => 'path',
        'target' => 'path_alias',
      ),
      array(
        'source' => 'GUID',
        'target' => 'guid',
        'unique' => TRUE,
      ),
    ));

    // Turn on update existing.
    $this->setSettings('path_test', 'FeedsTermProcessor', array('update_existing' => 2));

    // Create vocabulary.
    $edit = array(
      'name' => 'Addams vocabulary',
      'machine_name' => 'addams',
    );
    $this->drupalPost('admin/structure/taxonomy/add', $edit, t('Save'));

    $this->setSettings('path_test', 'FeedsTermProcessor', array('vocabulary' => 'addams'));

    // Import RSS file.
    $this->importFile('path_test', $this->absolutePath() . '/tests/feeds/path_alias.csv');
    $this->assertText('Created 9 terms');

    $aliases = array();

    for ($i = 1; $i <= 9; $i++) {
      $aliases[] = "path$i";
    }

    $this->assertAliasCount($aliases);

    // Adding a mapping will force update.
    $this->addMappings('path_test', array(
      array(
        'source' => 'fake',
        'target' => 'description',
      ),
    ));
    // Import RSS file.
    $this->importFile('path_test', $this->absolutePath() . '/tests/feeds/path_alias.csv');
    $this->assertText('Updated 9 terms');

    // Check that duplicate aliases are not created.
    $this->assertAliasCount($aliases);
  }

  public function assertAliasCount($aliases) {
    $in_db = db_select('url_alias', 'a')
      ->fields('a')
      ->condition('a.alias', $aliases)
      ->execute()
      ->fetchAll();

    $this->assertEqual(count($in_db), count($aliases), 'Correct number of aliases in db.');
  }
}
