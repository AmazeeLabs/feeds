<?php
// $Id$

/**
 * @file
 * Test case for Filefield mapper mappers/filefield.inc.
 */

/**
 * Class for testing Feeds file mapper.
 *
 * @todo Add a test for enclosures using a local file that is
 *   a) in place and that
 *   b) needs to be copied from one location to another.
 */
class FeedsMapperFileTestCase extends FeedsMapperTestCase {

  public static function getInfo() {
    return array(
      'name' => t('Mapper: File field'),
      'description' => t('Test Feeds Mapper support for file fields. <strong>Requires SimplePie library</strong>.'),
      'group' => t('Feeds'),
    );
  }

  /**
   * Set up the
   */
  public function setUp() {
    // Call parent setup with the required module
    parent::setUp(array('file', 'feeds_tests'));
  }

  /**
   * Basic test loading a single entry CSV file.
   */
  public function test() {
    $typename = $this->createContentType(NULL, array('files' => 'file'));

    // Create importer configuration.
    $this->createImporterConfiguration();
    $this->setPlugin('syndication', 'FeedsSimplePieParser');
    $this->setSettings('syndication', 'FeedsNodeProcessor', array('content_type' => $typename));
    $this->addMappings('syndication', array(
      array(
        'source' => 'title',
        'target' => 'title'
      ),
      array(
        'source' => 'timestamp',
        'target' => 'created'
      ),
      array(
        'source' => 'description',
        'target' => 'body'
      ),
      array(
        'source' => 'enclosures',
        'target' => 'field_files'
      ),
    ));

    $nid = $this->createFeedNode('syndication', $GLOBALS['base_url'] . '/testing/feeds/flickr.xml');
    $this->assertText('Created 4 nodes');

    $filename = array('tubing', 'foosball', 'attersee', 'hstreet');
    for($i = 0; $i < 4; $i++) {
      $this->drupalGet('node/'. ($i+2) .'/edit');
      $this->assertText($filename[$i]);
    }
  }

  /**
   * Handle file field widgets.
   */
  public function selectFieldWidget($fied_name, $field_type) {
    if ($field_type == 'file') {
      return 'file_generic';
    }
    else {
      return parent::selectFieldWidget($fied_name, $field_type);
    }
  }
}
